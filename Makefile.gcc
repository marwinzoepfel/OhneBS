# Makefile für OhneBS

# Compiler und Tools
ARMGNU ?= aarch64-none-elf
CC = $(ARMGNU)-gcc
LD = $(ARMGNU)-ld
OBJCOPY = $(ARMGNU)-objcopy

# Verzeichnisse
SRCDIR = src
INCDIR = include
BUILDDIR = build

# Compiler-Flags
# -I$(INCDIR) sagt dem Compiler, dass er im 'include'-Ordner nach Header-Dateien suchen soll.
CFLAGS = -Wall -O2 -ffreestanding -nostdinc -nostdlib -nostartfiles -I$(INCDIR)

# VPATH sagt 'make', wo die Quelldateien zu finden sind.
VPATH = $(SRCDIR)

# Liste aller Objektdateien, die wir erstellen wollen.
# $(addprefix ...) fügt 'build/' vor jeden Dateinamen.
OBJS = $(addprefix $(BUILDDIR)/, boot.o kernel.o gpio.o uart.o string_utils.o shell.o fb.o mb.o console.o)

# Name der finalen Kernel-Datei
TARGET = kernel8

# --- Regeln ---

# Standard-Regel: Erstelle das Image als Hauptziel
all: $(BUILDDIR)/$(TARGET).img

# Regel zum Linken: Nimm alle .o-Dateien und linke sie zur .elf-Datei
# $@ ist das Ziel dieser Regel (z.B. build/kernel8.elf)
$(BUILDDIR)/$(TARGET).elf: $(OBJS)
	$(LD) -nostdlib $(OBJS) -T link.ld -o $@

# Regel zum Erstellen des binären Images aus der .elf-Datei
# $< ist die erste Abhängigkeit (also die .elf-Datei)
$(BUILDDIR)/$(TARGET).img: $(BUILDDIR)/$(TARGET).elf
	$(OBJCOPY) -O binary $< $@

# Allgemeine Regel, um jede .c- oder .S-Datei in eine .o-Datei im build-Verzeichnis zu kompilieren.
# Die Pipe | $(BUILDDIR) sorgt dafür, dass das Verzeichnis zuerst erstellt wird.
$(BUILDDIR)/%.o: %.c | $(BUILDDIR)
	$(CC) $(CFLAGS) -c $< -o $@

$(BUILDDIR)/%.o: %.S | $(BUILDDIR)
	$(CC) $(CFLAGS) -c $< -o $@

# Regel, um das build-Verzeichnis zu erstellen, falls es nicht existiert.
$(BUILDDIR):
	mkdir -p $@

# Regel zum Aufräumen: Löscht das gesamte build-Verzeichnis.
clean:
	/bin/rm -rf $(BUILDDIR)
